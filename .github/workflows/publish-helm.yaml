name: Build & Publish Helm

on:
  release:
    types: [published]
  workflow_dispatch: {}

jobs:
  build_publish:
    name: Build & Publish Helm
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1
      - name: Login to GitHub Container Registry
        env:
          USERNAME: github-actions
          PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          helm registry login https://ghcr.io -u $USERNAME -p $PASSWORD

      - name: Chart Info
        id: chart-info
        shell: bash
        working-directory: charts
        run: |
          chart_info=$(helm show chart sindri-scroll)
          chart_name=$(echo "$chart_info" | grep '^name:' | awk '{print $2}')
          chart_version=$(echo "$chart_info" | grep '^version:' | awk '{print $2}')
          artifact_name="${chart_name}-${chart_version}.tgz"
          registry_name="ghcr.io/${{ github.repository }}"
          registry_name="${registry_name,,}"

          echo "chart_name=$chart_name" >> "$GITHUB_OUTPUT"
          echo "chart_version=$chart_version" >> "$GITHUB_OUTPUT"
          echo "artifact_name=$artifact_name" >> "$GITHUB_OUTPUT"
          echo "registry_name=$registry_name" >> "$GITHUB_OUTPUT"

      - name: Package & Push Chart
        working-directory: charts
        env:
          ARTIFACT_NAME: ${{ steps.chart-info.outputs.artifact_name }}
          REGISTRY_NAME: ${{ steps.chart-info.outputs.registry_name }}
        run: |
          helm dependency update sindri-scroll
          helm package sindri-scroll --destination .
          helm push $ARTIFACT_NAME oci://$REGISTRY_NAME

          echo "Chart pushed: $ARTIFACT_NAME" >> $GITHUB_STEP_SUMMARY

      # - name: Format Tag
      #   id: format-tag
      #   env:
      #     IMAGE_NAME: ghcr.io/${{ github.repository }}/prover
      #     IMAGE_TAG: ${{ github.ref_name }}
      #   run: |
      #     image_name="${IMAGE_NAME,,}"
      #     image_tag="${IMAGE_TAG,,}"
      #     echo "IMAGE_NAME=${image_name}" >> $GITHUB_OUTPUT
      #     echo "IMAGE_TAG=${image_tag}" >> $GITHUB_OUTPUT

      #     echo "IMAGE_NAME=${image_name}"
      #     echo "IMAGE_TAG=${image_tag}"

      # - name: Build Docker image
      #   env:
      #     IMAGE_NAME: ${{ steps.format-tag.outputs.IMAGE_NAME }}
      #     IMAGE_TAG: ${{ steps.format-tag.outputs.IMAGE_TAG }}
      #   run: |
      #     docker build -f docker/Dockerfile -t $IMAGE_NAME:$IMAGE_TAG .

      # - name: Push Docker image
      #   env:
      #     IMAGE_NAME: ${{ steps.format-tag.outputs.IMAGE_NAME }}
      #     IMAGE_TAG: ${{ steps.format-tag.outputs.IMAGE_TAG }}
      #   run: |
      #     docker push $IMAGE_NAME:$IMAGE_TAG
